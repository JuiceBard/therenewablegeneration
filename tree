var deltaSize, deltaHealth, deltaLeafCount, deltaLeafSize, transitionTime, currentTree, startFrameCount;
var tf = new Transformer();
var tf_w, tf_h;

var nameInp = 0;
var nameInputGen = false;
var drop = null;
var but = null;

var shouldReturnInfo = false;

var input_string = "The Renewable Generation";
var t, but;
var e = new Energy();
var defaultState = {

    "state": "NSW",
    "treeHealth": 70,
    "treeSize": 80,
    "totalDemand": 12900,
    "timeGenerated": "2020-08-17T22:45:00+10:00",
    "supply": [{
        "source": "Black Coal",
        "megawatts": 9000,
        "renewable": false
    },
    {
        "source": "Brown Coal",
        "megawatts": 4264.45,
        "renewable": false
    },
    {
        "source": "Gas",
        "megawatts": 190.43,
        "renewable": false
    },
    {
        "source": "Liquid Fuel",
        "megawatts": 0.23,
        "renewable": false
    },
    {
        "source": "Hydro",
        "megawatts": 31,
        "renewable": true
    },
    {
        "source": "Wind",
        "megawatts": 159.84,
        "renewable": true
    },
    {
        "source": "Small Solar",
        "megawatts": 168,
        "renewable": true
    },
    {
        "source": "Large Solar",
        "megawatts": 162,
        "renewable": true
    }
    ]
};

var out = defaultState;


// @necessary params
// seed: the inputted name
// Stats: a dictionary containing: size, health (how withered the tree looks), demand, leaves
// @necessary params

// @unnecessary params
// branchDepth: the maximum amount of branches stacked on top of each other (series)
// numOfBranches: the maximum amount of branches next to each other (parallel)
// sizeFunc = a function depicting the relation between the width of the line and the depth
// color = color of the tree
// @unnecessary params

function setup() {
    canv = createCanvas(innerWidth - 5, innerHeight - 5);
    frameRate(30);

    tf_w = width / 1.5;
    tf_h = height;


    if (nameInp) nameInp.remove();
    nameInp = createInput('');
    nameInp.input(name_inp);
    nameInp.position(width / 30, height / 2);
    nameInp.size(height / 3, height / 30)

    if (drop == null) { drop = createSelect(); }
    drop.position(width / 30, height / 2 + height / 10);
    drop.size(height / 10, height / 25)
    drop.option("")
    drop.option("NSW");
    drop.option("QLD");
    drop.option("VIC");
    drop.option("SA");
    drop.option("TAS");
    drop.option("WA");
    drop.changed(state_select);

    if (but == null) { but = new myButton(width / 30, height / 2 + height / 5, height / 4, height / 20, "Grow your tree", [0, 255, 0], [0, 220, 0], [0, 185, 0], change_tree); }
    but.x = width / 30;
    but.y = height / 2 + height / 5;
    but.w = height / 4;
    but.h = height / 20;

    t = new tree(input_string, defaultState, false, 7);
}

function draw() {
    clear()
    background(255);
    stroke(0);

    translate(tf_w, tf_h)
    rotate(-PI)

    t.display();
    t.lerp_update(out, 3)

    but.display();

    rotate(PI)
    translate(-tf_w, -tf_h)

    textFont('Verdana')
    textStyle(BOLD)
    textSize(height / 35)
    fill(0, 0, 0)

    text("Name: ", width / 30, height / 2 - height / 60)
    text("State: ", width / 30, height / 2 - height / 60 + height / 10)

    textSize(height / 12)

    text("The", width / 30, height / 5)
    text("Renewable", width / 30, height / 5 + height / 12)
    text("Generation", width / 30, height / 5 + height / 6)

    if (shouldReturnInfo){
        t.returnInfo();
        shouldReturnInfo = false;
    }
}

function name_inp() {
    input_string = this.value();
}

function state_select() {
    var item = this.value();

    e.update();

    if (item == "NSW") { out = e.NSW }
    else if (item == "QLD") { out = e.QLD }
    else if (item == "VIC") { out = e.VIC }
    else if (item == "SA") { out = e.VS }
    else if (item == "TAS") { out = e.TAS }
    else if (item == "WA") { out = e.WA }
    else { out = defaultState }
}

function change_tree() {
    clear();
    background(255);
    stroke(0);

    translate(width / 1.5, height)
    rotate(-PI)

    t = new tree(input_string, out, true)

    shouldReturnInfo = true;
}

function windowResized() {
    canv = resizeCanvas(innerWidth - 5, innerHeight - 5);

    tf_w = width / 1.5;
    tf_h = height;

    setup();
}

function mouseClicked() {
    but.mouseClicked();

}
